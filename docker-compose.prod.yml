version: '3.8'

services:
  # API Gateway - Main entry point
  api_gateway:
    build:
      context: ./backend
      dockerfile: api_gateway/Dockerfile
    container_name: api_gateway
    restart: always
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo_db:27017/
    depends_on:
      postgres_db:
        condition: service_healthy
      mongo_db:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NLP Service
  nlp_processor:
    build:
      context: ./backend
      dockerfile: nlp_processor/Dockerfile
    container_name: nlp_processor
    restart: always
    environment:
      - ENVIRONMENT=production
      - MODEL_NAME=${NLP_MODEL_NAME:-sentence-transformers/all-MiniLM-L6-v2}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo_db:27017/
    depends_on:
      postgres_db:
        condition: service_healthy
      mongo_db:
        condition: service_healthy
    networks:
      - backend-network

  # ETL Pipeline
  etl_pipeline:
    build:
      context: .
      dockerfile: etl_pipeline/Dockerfile
    container_name: etl_pipeline
    restart: always
    environment:
      - ENVIRONMENT=production
      - CACHE_DIR=/app/cache
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo_db:27017/
      - IBGE_API_KEY=${IBGE_API_KEY}
    volumes:
      - etl_cache:/app/cache
    depends_on:
      postgres_db:
        condition: service_healthy
      mongo_db:
        condition: service_healthy
    networks:
      - backend-network

  # PostgreSQL Database
  postgres_db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-target_analysis}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # MongoDB
  mongo_db:
    image: mongo:6.0
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-target_analysis}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  etl_cache:
