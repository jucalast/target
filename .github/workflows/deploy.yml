name: Deploy to OCI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to OCI Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # SSH into the server and run deployment commands
          ssh -o StrictHostKeyChecking=no ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} << 'ENDSSH'
            # Navigate to project directory
            cd ~/target-audience-identifier
            
            # Pull latest code
            echo "Pulling latest code..."
            git fetch --all
            git reset --hard origin/main
            
            # Create .env.prod from template if it doesn't exist
            if [ ! -f .env.prod ]; then
              echo "WARNING: .env.prod file not found! Creating from template..."
              if [ -f env.prod.template ]; then
                cp env.prod.template .env.prod
                echo "Created .env.prod from template. Please update the values and redeploy."
                exit 1
              else
                echo "ERROR: env.prod.template not found. Cannot create .env.prod"
                exit 1
              fi
            fi
            
            # Ensure the .env file has the correct permissions
            chmod 600 .env.prod
            
            # Pull latest images and deploy
            echo "Pulling latest Docker images..."
            docker-compose -f docker-compose.prod.yml pull
            
            echo "Starting services..."
            docker-compose -f docker-compose.prod.yml up -d --build --remove-orphans
            
            # Clean up old images and containers
            echo "Cleaning up..."
            docker system prune -f
            
            # Verify services are running
            echo "Verifying services..."
            docker ps
            
            echo "Deployment completed successfully!"
          ENDSSH