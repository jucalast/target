"""
Script para identificar e verificar as tabelas POF dispon√≠veis na API SIDRA.

Este script busca tabelas relacionadas √† Pesquisa de Or√ßamentos Familiares (POF)
para usar na an√°lise psicogr√°fica real.
"""
import sidrapy
import pandas as pd
from typing import List, Dict, Any
import json

def check_pof_tables() -> Dict[str, Any]:
    """
    Verifica tabelas POF dispon√≠veis e suas estruturas.
    
    Returns:
        Dicion√°rio com informa√ß√µes das tabelas POF encontradas
    """
    # Tabelas POF conhecidas do IBGE (baseado na documenta√ß√£o oficial)
    pof_tables = {
        "7482": {
            "name": "POF - Despesas monet√°rias e n√£o monet√°rias m√©dias mensais familiares",
            "description": "Despesas familiares por categoria",
            "variables": ["214", "1752"],  # Valor e percentual
            "key_classification": "315"  # Grupos de despesa
        },
        "7483": {
            "name": "POF - Despesas com alimenta√ß√£o no domic√≠lio",
            "description": "Despesas espec√≠ficas com alimenta√ß√£o",
            "variables": ["214"],
            "key_classification": "315"
        },
        "9050": {
            "name": "POF - Aquisi√ß√£o de bens dur√°veis",
            "description": "Bens dur√°veis adquiridos pelas fam√≠lias",
            "variables": ["2380"],  # N√∫mero de fam√≠lias
            "key_classification": "638"  # Tipos de bens dur√°veis
        },
        "9052": {
            "name": "POF - Avalia√ß√£o das condi√ß√µes de vida",
            "description": "Percep√ß√£o das fam√≠lias sobre suas condi√ß√µes",
            "variables": ["2380"],
            "key_classification": "640"  # Avalia√ß√£o de aspectos da vida
        }
    }
    
    print("üîç Verificando disponibilidade das tabelas POF...")
    available_tables = {}
    
    for table_code, table_info in pof_tables.items():
        print(f"\nüìä Testando tabela {table_code}: {table_info['name']}")
        
        try:
            # Teste com consulta simples - Brasil, √∫ltima pesquisa dispon√≠vel
            test_data = sidrapy.get_table(
                table_code=table_code,
                territorial_level="1",  # Brasil
                ibge_territorial_code="all",
                variable=table_info["variables"][0],
                period="last 1"  # √öltimo per√≠odo
            )
            
            if test_data:
                df = pd.DataFrame(test_data)
                print(f"   ‚úÖ Dispon√≠vel - {len(df)} registros encontrados")
                print(f"   üìÖ Per√≠odo: {df['D3N'].iloc[0] if 'D3N' in df.columns else 'N/A'}")
                
                available_tables[table_code] = {
                    **table_info,
                    "status": "available",
                    "sample_data": df.head(3).to_dict('records'),
                    "total_records": len(df),
                    "columns": list(df.columns)
                }
            else:
                print(f"   ‚ùå Sem dados retornados")
                available_tables[table_code] = {
                    **table_info,
                    "status": "no_data"
                }
                
        except Exception as e:
            print(f"   ‚ùå Erro: {str(e)}")
            available_tables[table_code] = {
                **table_info,
                "status": "error",
                "error": str(e)
            }
    
    return available_tables

def get_expense_categories(table_code: str = "7482") -> List[Dict[str, Any]]:
    """
    Obt√©m as categorias de despesa dispon√≠veis na tabela POF.
    
    Args:
        table_code: C√≥digo da tabela POF de despesas
        
    Returns:
        Lista com as categorias de despesa e seus c√≥digos
    """
    print(f"\nüè∑Ô∏è Obtendo categorias de despesa da tabela {table_code}...")
    
    try:
        # Consulta com classifica√ß√£o para ver todas as categorias
        data = sidrapy.get_table(
            table_code=table_code,
            territorial_level="1",
            ibge_territorial_code="all",
            variable="214",  # Valor
            period="last 1",
            classifications={"315": "all"}  # Todas as categorias de despesa
        )
        
        if data:
            df = pd.DataFrame(data)
            
            # Extrai informa√ß√µes das categorias
            categories = []
            if 'D2C' in df.columns and 'D2N' in df.columns:
                category_info = df[['D2C', 'D2N']].drop_duplicates()
                for _, row in category_info.iterrows():
                    categories.append({
                        "code": row['D2C'],
                        "name": row['D2N'],
                        "table": table_code
                    })
            
            print(f"   ‚úÖ {len(categories)} categorias encontradas")
            return categories
        else:
            print(f"   ‚ùå Nenhuma categoria encontrada")
            return []
            
    except Exception as e:
        print(f"   ‚ùå Erro ao obter categorias: {str(e)}")
        return []

def test_real_pof_query() -> Dict[str, Any]:
    """
    Testa uma consulta real de dados POF para uso na an√°lise psicogr√°fica.
    
    Returns:
        Dados POF estruturados para an√°lise
    """
    print("\nüß™ Testando consulta POF real para an√°lise psicogr√°fica...")
    
    try:
        # Consulta despesas familiares principais - Brasil
        despesas_data = sidrapy.get_table(
            table_code="7482",
            territorial_level="1",
            ibge_territorial_code="all",
            variable="214",  # Valor em reais
            period="last 1",
            classifications={
                "315": ["114023", "114024", "114025", "114027", "114029", "114030", "114031", "114032"]
                # Habita√ß√£o, Alimenta√ß√£o, Sa√∫de, Recrea√ß√£o, Educa√ß√£o, Vestu√°rio, Transporte, Comunica√ß√£o
            }
        )
        
        if despesas_data:
            df_despesas = pd.DataFrame(despesas_data)
            print(f"   ‚úÖ Dados de despesas obtidos: {len(df_despesas)} registros")
            
            # Estrutura os dados para an√°lise psicogr√°fica
            despesas_dict = {}
            for _, row in df_despesas.iterrows():
                if 'D2C' in row and 'V' in row:
                    categoria_code = str(row['D2C'])
                    valor = float(row['V']) if pd.notna(row['V']) else 0.0
                    despesas_dict[categoria_code] = valor
            
            print(f"   üìä Categorias mapeadas: {list(despesas_dict.keys())}")
            
            return {
                "despesas": despesas_dict,
                "periodo": df_despesas['D3N'].iloc[0] if 'D3N' in df_despesas.columns else "N/A",
                "fonte": "POF-IBGE",
                "tabela": "7482",
                "status": "success"
            }
        else:
            return {"status": "no_data", "error": "Nenhum dado retornado"}
            
    except Exception as e:
        print(f"   ‚ùå Erro na consulta: {str(e)}")
        return {"status": "error", "error": str(e)}

if __name__ == "__main__":
    print("üè† VERIFICA√á√ÉO DE TABELAS POF PARA AN√ÅLISE PSICOGR√ÅFICA")
    print("=" * 60)
    
    # 1. Verifica disponibilidade das tabelas
    tables_info = check_pof_tables()
    
    # 2. Obt√©m categorias de despesa
    categories = get_expense_categories()
    
    # 3. Testa consulta real
    real_data = test_real_pof_query()
    
    # 4. Salva resultados para an√°lise
    results = {
        "tables_availability": tables_info,
        "expense_categories": categories,
        "sample_real_data": real_data,
        "timestamp": pd.Timestamp.now().isoformat()
    }
    
    # Salva em arquivo para uso posterior
    with open("pof_analysis_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìã RESUMO:")
    print(f"   - Tabelas verificadas: {len(tables_info)}")
    print(f"   - Tabelas dispon√≠veis: {sum(1 for t in tables_info.values() if t.get('status') == 'available')}")
    print(f"   - Categorias de despesa: {len(categories)}")
    print(f"   - Dados de teste: {'‚úÖ Sucesso' if real_data.get('status') == 'success' else '‚ùå Erro'}")
    print(f"   - Resultados salvos em: pof_analysis_results.json")
    
    if real_data.get("status") == "success":
        print(f"\nüí∞ DADOS REAIS OBTIDOS:")
        despesas = real_data.get("despesas", {})
        for codigo, valor in despesas.items():
            print(f"   - {codigo}: R$ {valor:,.2f}")
